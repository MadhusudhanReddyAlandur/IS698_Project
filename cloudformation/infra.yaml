AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy EC2, Lambda, and DynamoDB with IAM Role and SSH access

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-dynamodb-logger-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0e58b56aa4d64231b  # Amazon Linux 2 (us-east-1)
      KeyName: MyKeyPair              # âœ… Your key pair for SSH access
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: subnet-0d019bb72c4ade3c1  # Your public subnet A
          GroupSet:
            - sg-007fb0ed16d80c8ea            # Your security group
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello from EC2 Web Server</h1>" > /var/www/html/index.html
      Tags:
        - Key: Name
          Value: WebServerInstance

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsersTable
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MyLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DynamoDBLogger
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('UsersTable')
              table.put_item(Item={'userId': '123', 'action': 'login'})
              return {'status': 'success'}

Outputs:

  EC2InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref WebServer

  EC2PublicIP:
    Description: Public IP of EC2 (if needed to SSH or test HTTP)
    Value: !GetAtt WebServer.PublicIp

  LambdaName:
    Description: Lambda Function Name
    Value: !Ref MyLambda

  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref MyDynamoDBTable